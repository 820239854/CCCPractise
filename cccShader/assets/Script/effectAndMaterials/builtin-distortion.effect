// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
        passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
          priority:2
        }
        
      ]
    }

  ]
  properties: {
  
    u_time: {
      type: float
      value: 0
    }
    u_distortion: {
      type: float
      value: 3.0
    }
    u_distortion2: {
      type: float
      value: 5.0
    }
    u_speed: {
      type: float
      value: 0.2
    }
    u_rollspeed: {
      type: float
      value: 0.0
    }
  }
%}

%% vs {
  precision highp float;
  attribute vec3 a_position;
  uniform mat4 cc_matViewProj;
  attribute  vec2 a_uv0;
  varying vec2 u_uv;
  void main()
  {
      gl_Position = cc_matViewProj *vec4(a_position, 1);
      u_uv = a_uv0;
  }
}


%% fs {

precision mediump float;
uniform sampler2D texture;


uniform float u_time;
uniform float u_distortion;//扭曲度
uniform float u_distortion2;//扭曲度
uniform float u_speed;//速度
uniform float u_rollspeed;//滚动速度
varying vec2 u_uv;


vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}
vec3 permute(vec3 x) {
		return mod289(((x*34.0)+1.0)*x);
}
float snoise(vec2 v){
  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                      -0.577350269189626,  // -1.0 + 2.0 * C.x
                        0.024390243902439); // 1.0 / 41.0
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);

  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;

  i = mod289(i); // Avoid truncation effects in permutation
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))+ i.x + vec3(0.0, i1.x, 1.0 ));

  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;

  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;

  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

void main(){
    vec2 p = u_uv;
		float ty =   u_time*u_speed;
		float yt = p.y - ty; 
    float offset = snoise(vec2(yt*3.0,0.0))*0.2;
		offset = offset*u_distortion * offset*u_distortion * offset;
		offset += snoise(vec2(yt*50.0,0.0))*u_distortion2*0.001;
		gl_FragColor = texture2D(texture,  vec2(fract(p.x + offset),fract(p.y-  u_time*u_rollspeed) ));
    
}

}




