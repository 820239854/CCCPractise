// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    
    u_outlineSize:{
       type: float

       value: 1
    }

    u_outlineColor:{
       type: color3
       value: [1,0.5,0.5]
    }


    u_textureSize:{
      type: vec2
      value: [960,640]
    }

    
  }
%}


%% vs {
  precision highp float;
  attribute vec3 a_position;
  uniform mat4 cc_matViewProj;
  attribute mediump vec2 a_uv0;
	varying mediump vec2 v_uv0;
  attribute vec4 a_color;
  varying   vec4 v_color;

  void main()
  {
      gl_Position = cc_matViewProj *vec4(a_position, 1);

      v_uv0 = a_uv0;
      v_color = a_color ;
  }
}

%% fs {

precision highp float;
uniform sampler2D texture;
varying lowp vec2 v_uv0;
uniform float     u_time; 
varying   vec4 v_color;

uniform float u_outlineSize;
uniform vec3 u_outlineColor ;
uniform vec2 u_textureSize ;

int getIsStrokeWithAngel(float angel) {
    int stroke = 0;
    float rad = angel * 0.01745329252; 
    vec2 unit = 1.0 / u_textureSize.xy;
    vec2 offset = vec2(u_outlineSize * cos(rad) * unit.x, u_outlineSize * sin(rad) * unit.y); 

    float a = texture2D(texture, v_uv0 + offset).a;
    if (a >= 0.3)
    {
        stroke = 1;
    }
    return stroke;
  }


void main()
{
    vec4 color = texture2D(texture, v_uv0);
    if (color.a >= 0.3) 
    {
        gl_FragColor = v_color * color;
        return;
    }

   
    int strokeCount = 0;
 

    for(int i = 0;i<12;i++){

      strokeCount += getIsStrokeWithAngel(float(i*30));
    }
    if (strokeCount > 0)
    {
        color.rgb = u_outlineColor;
        color.a = 1.;
    }
    gl_FragColor =  color*v_color;
}

}
