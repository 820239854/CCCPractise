// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
  }
%}

%% vs {
  precision highp float;
  attribute vec3 a_position;
  uniform mat4 cc_matViewProj;
  attribute mediump vec2 a_uv0;
	varying mediump vec2 v_uv0;
  attribute vec4 a_color;
  varying   vec4 v_color;

  void main()
  {
      gl_Position = cc_matViewProj *vec4(a_position, 1);

      v_uv0 = a_uv0;
      v_color = a_color ;
  }
}

%% fs {

precision highp float;
uniform sampler2D texture;
varying lowp vec2 v_uv0;
uniform float     u_time; 
varying   vec4 v_color;


const float maxW   =0.02; 
const float outlineSize = 1000.0;
const vec3 outlineColor = vec3(1.0, 1.0, 0.0);
 vec2 textureSize = vec2(640.0, 720.0);

int getIsStrokeWithAngel(float angel) {
    int stroke = 0;
    float rad = angel * 0.01745329252; // 这个浮点数是 pi / 180，角度转弧度
    vec2 unit = 1.0 / textureSize.xy;//单位坐标
    vec2 offset = vec2(outlineSize * cos(rad) * unit.x, outlineSize * sin(rad) * unit.y); //偏移量
    float a = texture2D(texture, v_uv0 + offset).a;
    if (a >= 0.5)// 我把alpha值大于0.5都视为不透明，小于0.5都视为透明
    {
        stroke = 1;
    }
    return stroke;
  }


void main()
{
    vec4 myC = texture2D(texture, v_uv0);
    if (myC.a >= 0.5) 
    {
        gl_FragColor = v_color * myC;
        return;
    }

   
    int strokeCount = 0;
    strokeCount += getIsStrokeWithAngel(0.0);
    strokeCount += getIsStrokeWithAngel(30.0);
    strokeCount += getIsStrokeWithAngel(60.0);
    strokeCount += getIsStrokeWithAngel(90.0);
    strokeCount += getIsStrokeWithAngel(120.0);
    strokeCount += getIsStrokeWithAngel(150.0);
    strokeCount += getIsStrokeWithAngel(180.0);
    strokeCount += getIsStrokeWithAngel(210.0);
    strokeCount += getIsStrokeWithAngel(240.0);
    strokeCount += getIsStrokeWithAngel(270.0);
    strokeCount += getIsStrokeWithAngel(300.0);
    strokeCount += getIsStrokeWithAngel(330.0);
    if (strokeCount > 0)
    {
        myC.rgb = outlineColor;
        myC.a = 1.0;
    }
   
    gl_FragColor =  myC*v_color;
}

}
